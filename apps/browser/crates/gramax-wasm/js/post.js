var R=new TextEncoder,C=new TextDecoder,B=self,P=async(w)=>{let m=await B.wasm._ralloc(w.byteLength);return new Uint8Array(B.wasm.wasmMemory.buffer).set(w,m),m},K=async(w)=>{let m=R.encode(w),_=await P(m);return[m.byteLength,_]},O=(w)=>{let m=Q(w);if(m?.buf.length==0)return{buf:void 0,ok:m.ok};return{buf:C.decode(m.buf),ok:m.ok}},Q=(w)=>{let m=new Uint8Array(B.wasm.wasmMemory.buffer),_=new DataView(m.buffer,w,9),U=_.getUint32(0,!0),V=_.getUint32(4,!0),D=_.getUint8(8)!==1,A=m.slice(V,V+U);return B.wasm._rfree(V,U),B.wasm._rfree(w,9),{buf:A,ok:D}};self.ptr2str=O;self.ptr2bytes=Q;self.str2ptr=K;self.emscriptenhttpconnections={};var E=new BroadcastChannel("pthreads-broadcast"),L=async(w,m)=>{let _=Module._set_last_http_error,[U,V]=await K(m);await _(w,V,U)},g=new TextDecoder,G=async(w,m,_)=>{if(w>=200&&w<300)return;try{if(m.length>4096)m=m.slice(0,4096);let U=g.decode(m);if(w===0&&U===""){w=999;let V=_?new URL(_).hostname:"";U=`Failed to send request to '${_}': domain '${V}' unreachable or CORS headers incorrect`}await L(w,U)}catch(U){console.error("failed to set last http error",U)}};E.addEventListener("message",(w)=>{if(w.data.type==="cancel-clone"){if(self.cancelToken===w.data.id&&Date.now()-w.data.date<1000)Object.values(self.emscriptenhttpconnections).forEach((m)=>{m?.abortController?.abort()})}});var J=(w)=>{self.wasm={wasmMemory:Module.HEAPU8,_rfree:Module._rfree,_ralloc:Module._ralloc};let m=Module._get_store(w);return O(m)?.buf};Object.assign(Module,{emscriptenhttpconnect:async function(w,m,_,U){return new Promise((D)=>{let A=Date.now()>>10;if(!_)_="GET";let j=J(1),k=J(2),F=J(3)||"git",T=J(4),M=new XMLHttpRequest,W=new AbortController;if(w=j&&j!=="null"?j+w.replace(/https?:\/\//,"/"):w,M.open(_,w,!0),M.responseType="arraybuffer",k)M.setRequestHeader("x-private-token",k);if(F)M.setRequestHeader("x-git-username",F);if(T)M.setRequestHeader("x-protocol",T);if(self.emscriptenhttpconnections[A]={xhr:M,abortController:W,resultbufferpointer:0,buffersize:m},U)Object.keys(U).forEach((q)=>M.setRequestHeader(q,U[q]));let X=Date.now(),Y=0,Z=0;if(M.onprogress=(q)=>{let $=Date.now();if($-X>1000)Y=q.loaded-Z,Z=q.loaded,X=$,self.postMessage({type:"clone-progress",progress:{type:"download",data:{id:self.cancelToken,bytes:q.loaded,downloadSpeedBytes:Y}}})},W.signal.addEventListener("abort",()=>{M.abort()}),_==="GET")M.onload=async function(q){await G(M.status,M.response),D(A)},M.onerror=async function(q){await G(M.status,M.response,w),D(A)},M.onabort=function(){D(A)},M.send();else D(A)})},emscriptenhttpwrite:function(w,m,_){let U=self.emscriptenhttpconnections[w],V=new Uint8Array(Module.HEAPU8.buffer,m,_).slice(0);if(!U.content)U.content=V;else{let D=new Uint8Array(U.content.length+V.length);D.set(U.content),D.set(V,U.content.length),U.content=D}},emscriptenhttpread:function(w,m,_){function U(D,A){let j=self.emscriptenhttpconnections[w],k=j.xhr.response.byteLength-j.resultbufferpointer;if(k>A)k=A;let F=new Uint8Array(j.xhr.response,j.resultbufferpointer,k);return writeArrayToMemory(F,D),j.resultbufferpointer+=k,k}return new Promise((D)=>{let A=self.emscriptenhttpconnections[w];if(A.content)A.xhr.onload=async function(j){await G(A.xhr.status,A.xhr.response),D(U(m,_))},A.xhr.onabort=function(){D(-1)},A.xhr.onerror=function(j){G(A.xhr.status,A.xhr.response),D(-1)},A.xhr.send(A.content.buffer),A.content=null;else D(U(m,_))})},emscriptenhttpfree:function(w){delete self.emscriptenhttpconnections[w]}});
