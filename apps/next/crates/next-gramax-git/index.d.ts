/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface RawCloneOptions {
  branch: string | null
  depth: number | null
  url: string
  to: string
  isBare: boolean
  cancelToken: number
}
export interface AccessTokenCreds {
  authorName: string
  authorEmail: string
  accessToken: string
  username: string | null
  protocol: string | null
}
export interface CommitOptions {
  message: string
  parentRefs: Array<string> | null
  files: Array<string> | null
}
export const enum TreeReadScopeObjectType {
  Head = 'Head',
  Commit = 'Commit',
  Reference = 'Reference'
}
export interface TreeReadScope {
  objectType: TreeReadScopeObjectType
  reference: string | null
}
export declare function is_init(repoPath: string): Promise<unknown>
export declare function is_bare(repoPath: string): Promise<unknown>
export declare function init_new(path: string, creds: AccessTokenCreds): Promise<unknown>
export interface MergeMessageFormatOptions {
  theirs: string
  squash: boolean | null
  maxCommits: number | null
  isMergeRequest: boolean | null
}
export declare function format_merge_message(repoPath: string, creds: AccessTokenCreds, opts: MergeMessageFormatOptions): Promise<unknown>
export declare function clone(creds: AccessTokenCreds, opts: RawCloneOptions, callback: (...args: any[]) => any): Promise<unknown>
export declare function clone_cancel(id: number): Output
export declare function status(repoPath: string, index: boolean): Promise<unknown>
export declare function status_file(repoPath: string, path: string): Promise<unknown>
export declare function get_all_commit_authors(repoPath: string): Promise<unknown>
export declare function default_branch(repoPath: string, creds: AccessTokenCreds): Promise<unknown>
export declare function branch_list(repoPath: string): Promise<unknown>
export declare function branch_info(repoPath: string, name?: string | undefined | null): Promise<unknown>
export declare function new_branch(repoPath: string, name: string): Promise<unknown>
export declare function delete_branch(repoPath: string, name: string, remote: boolean, creds?: AccessTokenCreds | undefined | null): Promise<unknown>
export declare function set_head(repoPath: string, refname: string): Promise<unknown>
export declare function checkout(repoPath: string, branch: string, create: boolean): Promise<unknown>
export declare function add_remote(repoPath: string, name: string, url: string): Promise<unknown>
export declare function has_remotes(repoPath: string): Promise<unknown>
export declare function get_remote(repoPath: string): Promise<unknown>
export declare function fetch(repoPath: string, creds: AccessTokenCreds, force: boolean): Promise<unknown>
export declare function push(repoPath: string, creds: AccessTokenCreds): Promise<unknown>
export declare function file_history(repoPath: string, filePath: string, count: number): Promise<unknown>
export interface CommitInfoOpts {
  depth: number
  simplify: boolean
}
export declare function get_commit_info(repoPath: string, oid: string, opts: CommitInfoOpts): Promise<unknown>
export declare function add(repoPath: string, paths: Array<string>, force: boolean): Promise<unknown>
export declare function commit(repoPath: string, creds: AccessTokenCreds, opts: CommitOptions): Promise<unknown>
export declare function diff(opts: Input): Promise<unknown>
export declare function restore(repoPath: string, staged: boolean, paths: Array<string>): Promise<unknown>
export interface ResetOptions {
  head: string | null
  mode: ResetMode
}
export const enum ResetMode {
  Soft = 'soft',
  Mixed = 'mixed',
  Hard = 'hard'
}
export declare function reset(repoPath: string, opts: ResetOptions): Promise<unknown>
export declare function stash(repoPath: string, creds: AccessTokenCreds, message?: string | undefined | null): Promise<unknown>
export declare function stash_apply(repoPath: string, oid: string): Promise<unknown>
export declare function stash_delete(repoPath: string, oid: string): Promise<unknown>
export interface MergeOptions {
  theirs: string
  deleteAfterMerge: boolean | null
  squash: boolean | null
  isMergeRequest: boolean | null
}
export declare function merge(repoPath: string, creds: AccessTokenCreds, opts: MergeOptions): Promise<unknown>
export declare function graph_head_upstream_files(repoPath: string, searchIn: string): Promise<unknown>
export declare function get_content(repoPath: string, path: string, oid?: string | undefined | null): Promise<unknown>
export declare function get_parent(repoPath: string, oid: string): Promise<unknown>
export declare function git_read_dir(repoPath: string, scope: TreeReadScope, path: string): Promise<unknown>
export declare function git_file_stat(repoPath: string, scope: TreeReadScope, path: string): Promise<unknown>
export declare function git_file_exists(repoPath: string, scope: TreeReadScope, path: string): Promise<unknown>
export declare function git_read_file(repoPath: string, scope: TreeReadScope, path: string): Promise<unknown>
export declare function git_read_dir_stats(repoPath: string, scope: TreeReadScope, path: string): Promise<unknown>
export declare function list_merge_requests(repoPath: string): Promise<unknown>
export declare function find_refs_by_globs(repoPath: string, pattern: Array<string>): Promise<unknown>
export declare function create_or_update_merge_request(repoPath: string, mergeRequest: string, creds: AccessTokenCreds): Promise<unknown>
export declare function get_draft_merge_request(repoPath: string): Promise<unknown>
export declare function reset_repo(): boolean
export interface GcOptions {
  looseObjectsLimit: number | null
  packFilesLimit: number | null
}
export declare function gc(repoPath: string, opts: GcOptions): Promise<unknown>
export declare function get_all_cancel_tokens(): Output
